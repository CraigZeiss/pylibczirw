# Use black for general linting decision-making
[flake8]
# Thin wrapper around pydocstyle that directly calls check() API
# See https://pypi.org/project/flake8-docstrings/
# Benefits over using pydocstyle directly:
# - proper output format (same as the rest of flake8) that can be regex-parsed
# - no stupid match patterns that silently ignore test files
# activated when running flake8 as soon as flake8-docstrings is installed (no further configuration required)
# Beware of the following issues/bugs:
# https://github.com/PyCQA/pydocstyle/issues/459
# https://github.com/PyCQA/pydocstyle/issues/461
docstring-convention=google
# ignore 1 blank line between summary line and description (D205) enforcement since we do not always use summary lines.
# ignore First line should end with a period, question mark, or exclamation point (D415) for the same reason
# Following https://github.com/psf/black/blob/master/docs/compatible_configs.md#black-compatible-configurations
max-line-length=120
extend-ignore=D205,D415,E203
extend-exclude=build/,out/,libs/

# See http://pylint.pycqa.org/en/latest/technical_reference/extensions.html
[MASTER]
ignore=build/,out/,libs/
load-plugins=pylint.extensions.docparams

[pylint]
# Following https://github.com/psf/black/blob/master/docs/compatible_configs.md#black-compatible-configurations
max-line-length=120
# Use the Parameter Documentation checker from pylint in addition to pydocstyle
# Primary reason: https://github.com/PyCQA/pydocstyle/issues/461 and related issues
# See http://pylint.pycqa.org/en/latest/technical_reference/extensions.html#pylint-extensions-docparams for details
default-docstring-type=google
# Format style used to check logging format string. `old` means using %
# formatting, `new` is for `{}` formatting,and `fstr` is for f-strings.
logging-format-style=new
# Allow any snake-cased variable names with 1 to 30 chars
# See https://www.reddit.com/r/learnpython/comments/2uiz96/single_letter_variable_names/
# See https://stackoverflow.com/a/49011908/9168401
# Do not allow two underscores in a row
# See https://stackoverflow.com/questions/30022815/regex-do-not-allow-character-appear-more-than-2-consecutively
# See https://stackoverflow.com/questions/17973233/regular-expression-for-no-more-than-two-repeated-letters-digits/17973807
variable-rgx=^(?!.*([_])\1)^(?=.{1,30}$)[a-z_][a-z0-9_]{0,}$
# Disable the following because of:
# broad-except: Usually no big deal
# invalid-name: Stylistic decision
# no-member: Largely checked by mypy
# too-few-public-methods: So what?
# too-many-public-methods: So what?
# too-many-arguments: So what?
# too-many-branches: Cannot be avoided sometimes.
# too-many-lines: Cannot be avoided sometimes.
# too-many-locals: Cannot be avoided sometimes.
# too-many-instance-attributes: Cannot be avoided sometimes.
# too-many-statements: Cannot be avoided sometimes.
# global-statement: Totally legitimate.
# protected-access: Accessing protected members (i.e. with underscore) is anyway subject to gentleman's agreement only
# use-a-generator: That is my decision.
# useless-param-doc: Compliance to other linters.
# useless-type-doc: Compliance to other linters.
# missing-return-type-doc: Taken care of by mypy.
# missing-yield-type-doc: Taken care of by mypy.
# missing-type-doc: Taken care of by mypy.
# missing-yield-doc: Usually sufficiently described in summary.
# missing-return-doc: Usually sufficiently described in summary.
# import-error: Flaky and will anyway be detected through failing runtime tests
disable=broad-except,
        invalid-name,
        no-member,
        too-few-public-methods,
        too-many-public-methods,
        too-many-arguments,
        too-many-branches,
        too-many-lines,
        too-many-locals,
        too-many-instance-attributes,
        too-many-statements,
        global-statement,
        protected-access,
        use-a-generator,
        useless-param-doc,
        useless-type-doc,
        missing-return-type-doc,
        missing-yield-type-doc,
        missing-type-doc,
        missing-yield-doc,
        missing-return-doc,
        missing-raises-doc,
        import-error
extension-pkg-allow-list=_pylibCZIrw
# Do single-threaded until https://github.com/PyCQA/pylint/issues/6012 is fixed
jobs=1

[SIMILARITIES]
# From https://stackoverflow.com/questions/29206482/pylint-duplicate-code-false-positive
# Minimum lines number of a similarity.
min-similarity-lines=5
# Ignore comments when computing similarities.
ignore-comments=yes
# Ignore docstrings when computing similarities.
ignore-docstrings=yes
# Ignore imports when computing similarities.
ignore-imports=no

[mypy]
disallow_untyped_defs=True
disallow_incomplete_defs=True
check_untyped_defs=True
no_implicit_optional=True
strict_optional=True
strict_equality = True
warn_redundant_casts=True
warn_unused_ignores=True
warn_return_any=False
warn_unused_configs=True
warn_unreachable=True
no_implicit_reexport=True
exclude="/(build|out|libs)/$"
namespace_packages = False
[mypy-_pylibCZIrw]
ignore_missing_imports=True
[mypy-xmltodict]
ignore_missing_imports = True
[mypy-numpy]
ignore_missing_imports = True
[mypy-validators]
ignore_missing_imports = True